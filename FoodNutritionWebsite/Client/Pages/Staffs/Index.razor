@page "/Staffs"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize(Roles = "Administrator")]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>Staff Index</h3>

<a href="/Staffs/create" class="btn btn-secondary my-2">
    <span class="oi oi-plus"></span> Create New Staff
</a>
<br />
<br />

<div class="container-fluid">
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
        @if (Staff == null)
        {
            <div class="alert alert-info">Loading Staff...</div>
        }
        else
        {
            @foreach (var staff in Staff)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@staff.FirstName</h5>
                            <p class="card-text">@staff.WorkEmail</p>
                            <p class="card-text">@staff.Role</p>
                            <p class="card-text">@staff.StartDate</p>
                            <div class="d-flex justify-content-center">
                                <a href="/Staffs/view/@staff.Id" class="btn btn-primary actionbutton">
                                    <i class="oi oi-eye"></i> View
                                </a>
                                <a href="/Staffs/edit/@staff.Id" class="btn btn-warning actionbutton">
                                    <i class="oi oi-pencil"></i> Edit
                                </a>
                                <button class="btn btn-danger actionbutton" @onclick="@(()=>Delete(staff.Id))">
                                    <i class="oi oi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    public List<Staff>? Staff;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Staff = await _client.GetFromJsonAsync<List<Staff>>($"api/staffs");
    }

    async Task Delete(int staffsId)
    {
        if (Staff != null)
        {
            var staffs = Staff.First(q => q.Id == staffsId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {staffs}?");

            if (confirm)
            {
                await _client.DeleteAsync($"api/staffs/{staffsId}");
                await OnInitializedAsync();
            }

        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }

    int GetStaffCount()
    {
        return Staff?.Count ?? 0;
    }

}



