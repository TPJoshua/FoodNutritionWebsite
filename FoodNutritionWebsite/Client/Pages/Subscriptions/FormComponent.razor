@inject HttpClient _client
@inject NavigationManager _navManager


<EditForm Model="@subscription" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card p-4">

                        <div class="form-group">
                            <label style="color: black">Subscription Name: </label>
                            <div>
                                <InputText @bind-Value="subscription.SubscriptionName" class="form-control" />
                                <ValidationMessage For="@(() => subscription.SubscriptionName)" />

                            </div>
                        </div>



                        <div class="form-group">
                            <label style="color: black">Meal Plan:</label>
                            <div>
                                <InputSelect @bind-Value="subscription.MealPlanID" class="form-control">
                                    <option value="">--Select Subscription--</option>
                                    @if (mealplan != null)
                                    {
                                        foreach (var mealplans in mealplan)
                                        {
                                            <option value="@mealplans.Id">@mealplans.MealPlanName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => subscription.MealPlanID)" />
                            </div>
                        </div>


                        <div class="form-group">
                            <label style="color: black">Subscription Price: </label>
                            <div>
                                <InputNumber @bind-Value="subscription.SubscriptionPrice" class="form-control" step="0.01" />
                                <ValidationMessage For="@(() => subscription.SubscriptionPrice)" />
                            </div>
                        </div>


                        <div class="form-group">
                            <label style="color: black">Subscription Description: </label>
                            <div>
                                <InputText @bind-Value="subscription.SubscriptionDescription" class="form-control" />
                                <ValidationMessage For="@(() => subscription.SubscriptionDescription)" />

                            </div>
                        </div>

                        <div class="form-group">
                            <label style="color: black">Payment Description: </label>
                            <div>
                                <InputText @bind-Value="subscription.PaymentDescription" class="form-control" />
                                <ValidationMessage For="@(() => subscription.PaymentDescription)" />

                            </div>
                        </div>
                        @if (!Disabled)
                        {
                            <button type="submit" class="btn btn-primary btn-block" style="margin-top: 1.5rem;">
                                @ButtonText
                            </button>
                        }

                        <br>
                        <button type="button" class="btn btn-secondary btn-block" @onclick="BackToList">Back to List</button>
                        
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
    


</EditForm>


@code {
    [Parameter] public Subscription? subscription { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    private IList<MealPlan>? mealplan;

    protected async override Task OnInitializedAsync()
    {
        mealplan = await _client.GetFromJsonAsync<List<MealPlan>>($"api/mealplans");
    }

    private async Task BackToList()
    {
        _navManager.NavigateTo("/Subscriptions");
    }
}