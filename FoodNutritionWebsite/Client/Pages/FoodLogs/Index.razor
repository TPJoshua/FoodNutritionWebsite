@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@page "/FoodLogs"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>FoodLogs Index</h3>


@if (FoodLogs == null)
{
    <div class="alert alert-info">Loading Food Logs...</div>
}

else
{
    <a href="/FoodLogs/create" class="btn btn-secondary">
        <span class="oi oi-plus"></span>
        Create New FoodLogs
    </a>
    <br />
    <br />
    
    <AuthorizeView Roles = "Administrator">
        <Authorized>

            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Food Name</th>
                        <th>Quantity</th>
                        <th>Calory</th>
                        <th>Date Added</th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var foodlogs in FoodLogs)
                    {
                        <tr>
                            <td>@foodlogs.User.UserName</td>
                            <td>@foodlogs.Food.FoodName</td
                            <td>@foodlogs.Quantity</td>
                            <td>@foodlogs.Food.FoodCalory</td>
                            <td>@foodlogs.DateUpdated</td>

                            <td>
                                <a href="/FoodLogs/view/@foodlogs.Id" class="bth btn-primary">
                                    <span class="oi oi-book"></span>
                                </a>

                                <a href="/FoodLogs/edit/@foodlogs.Id" class="bth btn-primary">
                                    <span class="oi oi-pencil"></span>
                                   </a>

                                <button class="btn btn-danger" @onclick="@(()=>Delete(foodlogs.Id))">
                                    <span class="oi oi-book"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>
        </Authorized>
    </AuthorizeView>

    <AuthorizeView Roles = "User">
        <Authorized>
            
            <table class="table table-responsive" id="bookingsTable">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Food Name</th>
                        <th>Quantity</th>
                        <th>Date Added</th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var foodlogs in FoodLogs)
                    {
                        <tr>
                            <td>@foodlogs.User.UserName</td>
                            <td>@foodlogs.Food.FoodName</td
                            <td>@foodlogs.Quantity</td>
                            <td>@foodlogs.DateUpdated</td>

                            <td>
                                <a href="/FoodLogs/view/@foodlogs.Id" class="bth btn-primary">
                                    <span class="oi oi-book"></span>
                                </a>

                                <a href="/FoodLogs/edit/@foodlogs.Id" class="bth btn-primary">
                                    <span class="oi oi-pencil"></span>
                                   </a>

                                <button class="btn btn-danger" @onclick="@(()=>Delete(foodlogs.Id))">
                                    <span class="oi oi-book"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>
        </Authorized>
    </AuthorizeView>

}






@code {
    public List<FoodLog>? FoodLogs;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        FoodLogs = await _client.GetFromJsonAsync<List<FoodLog>>($"api/FoodLogs");

    }

    async Task Delete(int foodlogsId)
    {
        if (FoodLogs != null)
        {
            var foodlogs = FoodLogs.First(q => q.Id == foodlogsId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {foodlogs}?");

            if (confirm)
            {
                await _client.DeleteAsync($"api/FoodLogs/{foodlogsId}");
                await OnInitializedAsync();
            }

        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }

    int GetFoodLogsCount()
    {
        return FoodLogs?.Count ?? 0;
    }

}

<p>Total FoodLogs: @GetFoodLogsCount()</p>