@inject NavigationManager _navManager
@inject HttpClient _client



<EditForm Model="@foodlog" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>User:</label>
            <div>
                <InputSelect @bind-Value="foodlog.UserID" class="form-control">
                    <option value="">--Select User--</option>
                    @if (Users != null)
                    {
                        foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.UserName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => foodlog.UserID)" />
            </div>
        </div>


        <div class="form-group">
            <label>Food Name:</label>
            <div>
                <InputSelect @bind-Value="foodlog.FoodID" class="form-control">
                    <option value="">--Select Food--</option>
                    @if (Foods != null)
                    {
                        foreach (var foods in Foods)
                        {
                            <option value="@foods.Id">@foods.FoodName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => foodlog.FoodID)" />
            </div>
        </div>


        <div class="form-group">
            <label>Quantity: </label>
            <div>
                <InputNumber @bind-Value="foodlog.Quantity" class="form-control" />
                <ValidationMessage For="@(() => foodlog.Quantity)" />

            </div>
        </div>
        

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <button type="button" class="btn btn-secondary btn-block" @onclick="BackToList">Back to List</button>

</EditForm>




@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public FoodLog? foodlog { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<User>? Users;
    private IList<Food>? Foods;

    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{"api/Users/"}");
        Foods = await _client.GetFromJsonAsync<List<Food>>($"api/foods/");

    }

    private async Task BackToList()
    {
        _navManager.NavigateTo("/Foodlogs");
    }
}