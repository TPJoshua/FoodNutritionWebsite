@page "/FoodLogs/create"
@inject HttpClient _client
@inject NavigationManager _navManager




<h3 class="card-title">Create FoodLog Page</h3>
<hr />
<br />





<EditForm Model="@foodlog" OnValidSubmit="CreateFoodLog">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>User:</label>
        <div>
            <InputSelect @bind-Value="foodlog.UserID" class="form-control">
                <option value="">--Select User--</option>
                @if (Users != null)
                {
                    foreach (var user in Users)
                    {
                        <option value="@user.Id">@user.UserName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => foodlog.UserID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Food Name: </label>
        <div>
            <InputText @bind-Value="foodlog.FoodName" class="form-control" />
            <ValidationMessage For="@(() => foodlog.FoodName)" />

        </div>
    </div>

    <div class="form-group">
        <label>Food Type: </label>
        <div>
            <InputText @bind-Value="foodlog.FoodType" class="form-control" />
            <ValidationMessage For="@(() => foodlog.FoodType)" />

        </div>
    </div>


    <!-- Other form components go here -->

    <button type="submit" class="btn btn-success btn-block">Create FoodLog</button>
</EditForm>




@code {
    FoodLog foodlog = new FoodLog();

    private IList<User>? Users;
    


	protected async override Task OnInitializedAsync()
	{
		Users = await _client.GetFromJsonAsync<List<User>>($"api/Users");

	}

	private async Task CreateFoodLog()
	{
		await _client.PostAsJsonAsync("api/FoodLogs/", foodlog);
		_navManager.NavigateTo("/FoodLogs");

	}

}


