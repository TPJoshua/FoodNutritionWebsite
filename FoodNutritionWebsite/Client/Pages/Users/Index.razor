@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@page "/users"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>Users Index</h3>

@if (Users == null)
{
    <div class="alert alert-info">Loading Users...</div>
}
else
{
    <AuthorizeView Roles="Administrator">
        <Authorized>
            <a href="/users/create" class="btn btn-primary">
                <span class="oi oi-plus"></span> Create New User
            </a>
            <br /><br />

            <div class="container-fluid">
                <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
                    @foreach (var user in Users)
                    {
                        <div class="col">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title" style="color: black">User Name: @user.UserName</h5>
                                    <p class="card-text" style="color: black">User Email: @user.UserEmail</p>
                                    <p class="card-text" style="color: black">User Date Of Birth: @user.UserDOB</p>
                                    <div class="d-flex justify-content-center">
                                        <a href="/users/view/@user.Id" class="btn btn-primary actionbutton">
                                            <i class="oi oi-eye"></i> View
                                        </a>
                                        <a href="/users/edit/@user.Id" class="btn btn-warning actionbutton">
                                            <i class="oi oi-pencil"></i> Edit
                                        </a>
                                        <button class="btn btn-danger actionbutton" @onclick="() => Delete(user.Id)">
                                            <i class="oi oi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </Authorized>
    </AuthorizeView>

    <AuthorizeView Roles="User">
        <Authorized>
            <a href="/users/create" class="btn btn-primary">
                <span class="oi oi-plus"></span> Create New User
            </a>
            <br /><br />

            <div class="container-fluid">
                <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
                    @foreach (var user in Users)
                    {
                        <div class="col">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title" style="color: black">User Name: @user.UserName</h5>
                                    <p class="card-text" style="color: black">User Email: @user.UserEmail</p>
                                    <p class="card-text" style="color: black">User Date Of Birth: @user.UserDOB</p>
                                    <div class="d-flex justify-content-center">
                                        <a href="/users/view/@user.Id" class="btn btn-primary actionbutton">
                                            <i class="oi oi-eye"></i> View
                                        </a>
                                        <a href="/users/edit/@user.Id" class="btn btn-warning actionbutton">
                                            <i class="oi oi-pencil"></i> Edit
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
}

@code {
    private List<User>? Users;

    protected override async Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>("api/Users");
    }

    private async Task Delete(int userId)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete this user?"))
        {
            await _client.DeleteAsync($"api/Users/{userId}");
            Users = await _client.GetFromJsonAsync<List<User>>("api/Users"); // Re-fetch the list after deletion
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

   
}
