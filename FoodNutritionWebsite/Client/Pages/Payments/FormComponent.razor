@inject HttpClient _client
@inject NavigationManager _navManager


<EditForm Model="@payment" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Subscription:</label>
            <div>
                <InputSelect @bind-Value="payment.SubscriptionID" class="form-control">
                    <option value="">--Select Subscription--</option>
                    @if (subscription != null)
                    {
                        foreach (var subscrip in subscription)
                        {
                            <option value="@subscrip.Id">@subscrip.SubscriptionName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => payment.SubscriptionID)" />
            </div>
        </div>


        <div class="form-group">
            <label>Payment card: </label>
            <div>
                <InputText @bind-Value="payment.CardNum" class="form-control" />
                <ValidationMessage For="@(() => payment.CardNum)" />

            </div>
        </div>



        <div class="form-group">
            <label>Card Cvv: </label>
            <div>
                <InputText @bind-Value="payment.Cvv" class="form-control" />
                <ValidationMessage For="@(() => payment.Cvv)" />

            </div>
        </div>

        <div class="form-group">
            <label>Card Exp: </label>
            <div>
                <InputText @bind-Value="payment.CardExp" class="form-control" />
                <ValidationMessage For="@(() => payment.CardExp)" />

            </div>
        </div>

        


        

    </fieldset>




    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <button type="button" class="btn btn-secondary btn-block" @onclick="BackToList">Back to List</button>

</EditForm>








@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Payment? payment { get; set; }
    //[Parameter] public List<Subscription>? subscription { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Subscription>? subscription;

    protected async override Task OnInitializedAsync()
    {
        subscription = await _client.GetFromJsonAsync<List<Subscription>>($"{"api/Subscriptions/"}");

    }

    private async Task BackToList()
    {
        _navManager.NavigateTo("/users");
    }
}