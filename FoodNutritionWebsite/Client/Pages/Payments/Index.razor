﻿@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@page "/Payments"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>Payments Index</h3>


@if (Payments == null)
{
    <div class="alert alert-info">Loading Payments...</div>
}

else
{

    <AuthorizeView Roles="Administrator">
        <Authorized>

            <a href="/Payments/create" class="btn btn-secondary">
                <span class="oi oi-plus"></span>
                Create New Payments
            </a>
            <br />
            <br />

            <table class="table table-responsive" id="bookingsTable">

            <thead>
                <tr>
                    <th> Subscription Name</th>
                    <th> Credit Card Num</th>
                    <th> Credit Card Cvv</th>
                    <th> Credit Card Exp</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var payments in Payments)
                {

                    <tr>
                        <td>@payments.Subscription.SubscriptionName</td
                        <td>@payments.CardNum</td>
                        <td>@payments.Cvv</td>
                        <td>@payments.CardExp</td>
                        <td>
                            <a href="/Payments/view/@payments.Id" class="bth btn-primary">
                                <span class="oi oi-book"></span>
                            </a>

                            <a href="/Payments/edit/@payments.Id" class="bth btn-primary">
                                <span class="oi oi-pencil"></span>
                            </a>

                            <button class="btn btn-danger" @onclick="@(()=>Delete(payments.Id))">
                                <span class="oi oi-book"></span>
                            </button>

                        </td>
                    </tr>
                }



            </tbody>

            </table>

        </Authorized>
    </AuthorizeView>


    <AuthorizeView Roles="User">
        <Authorized>
            
            <table class="table table-responsive" id="bookingsTable">

            <thead>
                <tr>
                    <th> Subscription Name</th>
                    <th> Credit Card Num</th>
                    <th> Credit Card Cvv</th>
                    <th> Credit Card Exp</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var payments in Payments)
                {

                    <tr>
                        <td>@payments.Subscription.SubscriptionName</td
                        <td>@payments.CardNum</td>
                        <td>@payments.Cvv</td>
                        <td>@payments.CardExp</td>
                        <td>
                            <a href="/Payments/view/@payments.Id" class="bth btn-primary">
                                <span class="oi oi-book"></span>
                            </a>


                        </td>
                    </tr>
                }



            </tbody>

            </table>

        </Authorized>
    </AuthorizeView>
    
}






@code {
    public List<Payment>? Payments;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"api/Payments");
    }

    async Task Delete(int paymentsId)
    {
        if (Payments != null)
        {
            var payment = Payments.First(q => q.Id == paymentsId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment}?");

            if (confirm)
            {
                await _client.DeleteAsync($"api/Payments/{paymentsId}");
                await OnInitializedAsync();
            }

        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }

    int GetPaymentCount()
    {
        return Payments?.Count ?? 0;
    }

}

<p>Total Payments: @GetPaymentCount()</p>