@page "/Payments"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3>Payments Index</h3>

<a href="/Payments/create" class="btn btn-primary my-2">
    <span class="oi oi-plus"></span> Create New Payment
</a>
<br />
<br />
<div class="col-4 mt-3 justify-content-end ">
    <Input @oninput="Search" placeholder="Seach Payments" class="p-3" />

</div>
<br />

<div class="container-fluid">
    <div class="row row-cols-1 row-cols-md-4 g-4 mt-2">
        @if (Payments == null)
        {
            <div class="alert alert-info">Loading Payments...</div>
        }
        else
        {
            foreach (var payment in Payments)
            {
                <div class="col">
                    <div class="card h-100">
                            <h5 class="card-title">@payment.SubscriptionPlanName</h5>
                            <p class="card-text">
                                Payments: @payment.Subscription.SubscriptionName<br>
                                Card Number: @payment.CardNum<br>
                                CVV: @payment.Cvv<br>
                                Expiry: @payment.CardExp<br>
                            </p>
                            <div class="text-center">
                                <a href="/Payments/view/@payment.Id" class="btn btn-primary m-1">
                                    <i class="oi oi-eye"></i> View
                                </a>
                                <a href="/Payments/edit/@payment.Id" class="btn btn-warning m-1">
                                    <i class="oi oi-pencil"></i> Edit
                                </a>
                                <button class="btn btn-danger m-1" @onclick="@(() => Delete(payment.Id))">
                                    <i class="oi oi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
            }
        }
    </div>
</div>






@code {
    public List<Payment>? Payments; 

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"api/Payments");
    }

    async Task Delete(int paymentsId)
    {
        if (Payments != null)
        {
            var payment = Payments.First(q => q.Id == paymentsId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment}?");

            if (confirm)
            {
                await _client.DeleteAsync($"api/Payments/{paymentsId}");
                await OnInitializedAsync();
            }

        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

    public async void Search(ChangeEventArgs args)
    {
        var searchTerm = (string)args.Value;
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"api/Payments");

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            Payments = await _client.GetFromJsonAsync<List<Payment>>($"api/Payments");
        }
        else
        {
            Payments = Payments
                .Where(x => x.CardNum.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(x => x.Id)
                .ToList();
        }

        StateHasChanged();
    }

}

