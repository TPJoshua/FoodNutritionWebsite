@page "/Payments/create"
@inject HttpClient _client
@inject NavigationManager _navManager


<h3 class="card-title">Create Payment Page</h3>
<hr />
<br />


<EditForm Model="@payment" OnValidSubmit="CreatePayment">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Subscription:</label>
        <div>
            <InputSelect @bind-Value="payment.SubscriptionID" class="form-control">
                <option value="">--Select Subscription--</option>
                @if (subscription != null)
                {
                    foreach (var subscrip in subscription)
                    {
                        <option value="@subscrip.Id">@subscrip.SubscriptionName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => payment.SubscriptionID)" />
        </div>
    </div>


    <div class="form-group">
        <label>Payment card: </label>
        <div>
            <InputText @bind-Value="payment.CardNum" class="form-control" />
            <ValidationMessage For="@(() => payment.CardNum)" />

        </div>
    </div>


    
    <div class="form-group">
        <label>Card Cvv: </label>
        <div>
            <InputText @bind-Value="payment.Cvv" class="form-control" />
            <ValidationMessage For="@(() => payment.Cvv)" />

        </div>
    </div>

    <div class="form-group">
        <label>Card Exp: </label>
        <div>
            <InputText @bind-Value="payment.CardExp" class="form-control" />
            <ValidationMessage For="@(() => payment.CardExp)" />

        </div>
    </div>





    <!-- Other form components go here -->

    <button type="submit" class="btn btn-success btn-block">Create Payment</button>


    <button type="button" class="btn btn-secondary btn-block" @onclick="BackToList">Back to List</button>

</EditForm>


@code {
    Payment payment = new Payment();
    private IList<Subscription>? subscription;


    protected async override Task OnInitializedAsync()
    {
        subscription = await _client.GetFromJsonAsync<List<Subscription>>($"api/Subscriptions");

    }


    private async Task CreatePayment()
    {
        await _client.PostAsJsonAsync("api/Payments/", payment);
        _navManager.NavigateTo("/Payments");

    }



    private async Task BackToList()
    {
        _navManager.NavigateTo("/users");
    }

}