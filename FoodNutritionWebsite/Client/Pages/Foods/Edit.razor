@page "/Food/edit/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <h3 class="mb-4 text-center">Edit Food Item</h3>
            <div class="card p-4">
                <EditForm Model="@food" OnValidSubmit="@EditFood">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="form-group mb-3">
                        <label for="foodName" class="form-label">Name:</label>
                        <InputText id="foodName" @bind-Value="@food.FoodName" class="form-control" placeholder="Enter food name" />
                        <ValidationMessage For="@(() => food.FoodName)" class="text-danger" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="foodDescription" class="form-label">Description:</label>
                        <InputTextArea id="foodDescription" @bind-Value="@food.FoodDescription" class="form-control" placeholder="Enter a brief description" rows="3" />
                        <ValidationMessage For="@(() => food.FoodDescription)" class="text-danger" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="foodCategory" class="form-label">Category:</label>
                        <InputText id="foodCategory" @bind-Value="@food.FoodCategory" class="form-control" placeholder="Enter food category" />
                        <ValidationMessage For="@(() => food.FoodCategory)" class="text-danger" />
                    </div>

                    <div class="form-group mb-4">
                        <label for="foodCalory" class="form-label">Calories:</label>
                        <InputText id="foodCalory" @bind-Value="@food.FoodCalory" class="form-control" placeholder="Enter calorie count" />
                        <ValidationMessage For="@(() => food.FoodCalory)" class="text-danger" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="foodPicture" class="form-label">Picture URL:</label>
                        <InputText id="foodPicture" @bind-Value="@food.FoodPicture" @onchange="@UpdateImage" class="form-control" placeholder="Enter image URL" />
                        <ValidationMessage For="@(() => food.FoodPicture)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrWhiteSpace(food.FoodPicture))
                    {
                        <div class="form-group mb-4 text-center">
                            <img src="@food.FoodPicture" class="img-fluid img-thumbnail" alt="Food Image" style="max-height: 300px;" />
                        </div>
                    }

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button class="btn btn-secondary" @onclick="GoBack">
                            <i class="oi oi-arrow-left"></i>
                            Back
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="oi oi-circle-check" style="margin-right: 2px;"></i>
                            Update
                        </button>
                    </div>
                
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
	[Parameter] public int id { get; set; }
	Food? food = new Food();

	protected async override Task OnParametersSetAsync()	
	{
		food = await _client.GetFromJsonAsync<Food>($"{"api/foods"}/{id}");
	}

	async Task EditFood()
	{
		await _client.PutAsJsonAsync($"{"api/foods"}/{id}", food);
		_navManager.NavigateTo("/Food/");

	}
    private void UpdateImage(ChangeEventArgs e)
    {
        food.FoodPicture = e.Value?.ToString();
    }

    void GoBack()
    {
        _navManager.NavigateTo("/Food/");
    }
}
