@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@page "/Food"
@inject HttpClient _client
@inject IJSRuntime js
@using System.Security.Claims
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Food Index</h1>


<a href="/Food/create" class="btn btn-primary">
    <span class="oi oi-plus"></span>
    Create New Food
</a>
<br />
<br />

<div class="container-fluid">
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
        @if (Food == null)
        {
            <div class="alert alert-info">Loading Foods...</div>
        }
        else
        {
            @foreach (var food in Food)
            {
                <div class="col afood">


                    <div class="card h-100 foodcard" style="text-decoration: none;">
                        <img src="@food.FoodPicture" class="catfoodimage img-fluid" style="max-width: 100%; max-height: 100%">


                        <div class="card-body foodcardbody">
                            <h3 class="foodname">@food.FoodName</h3>
                            <h5 class="foodprice">@food.FoodCalory</h5>
                            <div class="d-flex justify-content-center">
                                <a href="/food/view/@food.Id" class="btn btn-primary actionbutton">
                                    <i class="oi oi-eye"></i> View
                                </a>
                                <a href="/food/edit/@food.Id" class="btn btn-warning actionbutton">
                                    <i class="oi oi-pencil"></i> Edit
                                </a>
                                <button class="btn btn-danger actionbutton" @onclick="@(()=>Delete(@food.Id))">
                                    <i class="oi oi-trash"></i>  Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    public List<Food>? Food;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Food = await _client.GetFromJsonAsync<List<Food>>($"api/foods");
    }

    async Task Delete(int foodsId)
    {
        if (Food != null)
        {
            var foods = Food.First(q => q.Id == foodsId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {foods}?");

            if (confirm)
            {
                await _client.DeleteAsync($"api/foods/{foodsId}");
                await OnInitializedAsync();
            }

        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

    int GetFoodCount()
    {
        return Food?.Count ?? 0;
    }

}

@* <p>Total Food: @GetFoodCount()</p> *@


