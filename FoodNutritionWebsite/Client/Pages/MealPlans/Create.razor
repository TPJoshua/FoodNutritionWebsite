@page "/MealPlans/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Meal Plan</h3>
<hr />
<br />

<EditForm Model="@mealplan" OnValidSubmit="CreateMealPlan">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label>Name: </label>
		<div>
			<InputText @bind-Value="@mealplan.MealPlanName" class="form-control" />
			<ValidationMessage For="@(() => mealplan.MealPlanName)" />
		</div>
	</div>
	<div class="form-group">
		<label>Category: </label>
		<div>
			<InputText @bind-Value="@mealplan.MealPlanCategory" class="form-control" />
			<ValidationMessage For="@(() => mealplan.MealPlanCategory)" />
		</div>
	</div>
	<div class="form-group">
		<label>Staff: </label>
		<div>
			<InputSelect @bind-Value="mealplan.StaffID" class="form-control">
				<option value"">-- Select Staff --</option>
				@if (Staffs != null)
				{
					foreach (var staff in Staffs)
					{
						<option value="@staff.Id">@staff.FirstName</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => mealplan.StaffID)" />
		</div>
	</div>
	
	<button type="submit" class="btn btn-success btn-block">
		Create MealPlan
	</button>
</EditForm>

@code {
	MealPlan mealplan = new MealPlan();

	private IList<Staff>? Staffs;

	protected async override Task OnInitializedAsync()
	{
		Staffs = await _client.GetFromJsonAsync<List<Staff>>($"api/Staffs");
	}

	private async Task CreateMealPlan()
	{
		await _client.PostAsJsonAsync($"api/mealplans", mealplan);
		_navManager.NavigateTo("/MealPlans/");
	}
}
