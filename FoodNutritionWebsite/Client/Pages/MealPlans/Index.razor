@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using FoodNutritionWebsite.Client.Services

@page "/MealPlans"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize(Roles = "Administrator")]

<h3>MealPlan Index</h3>


<a href="/MealPlans/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New MealPlan
</a>
<br />
<br />

@if (MealPlan == null)
{
    <div class="alert alert-info">Loading Meal Plan...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">

        <thead>
            <tr>
                <th>Meal Plan Name</th>
                <th>Category</th
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var mealplans in MealPlan)
            {

                <tr>
                    <td>@mealplans.MealPlanName</td>
                    <td>@mealplans.MealPlanCategory</td>
                
                    <td>
                        <a href="/MealPlans/view/@mealplans.Id" class="bth btn-primary">
                            <span class="oi oi-book"></span>
                        </a>

                        <a href="/MealPlans/edit/@mealplans.Id" class="bth btn-primary">
                            <span class="oi oi-pencil"></span>
                        </a>

                        <button class="btn btn-danger" @onclick="@(()=>Delete(mealplans.Id))">
                            <span class="oi oi-book"></span>
                        </button>

                    </td>
                </tr>
            }

        </tbody>

    </table>
    }


@code {
    public List<MealPlan>? MealPlan;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        MealPlan = await _client.GetFromJsonAsync<List<MealPlan>>($"api/mealplans");
    }

    async Task Delete(int mealplansId)
    {
        if (MealPlan != null)
        {
            var mealplans = MealPlan.First(q => q.Id == mealplansId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {mealplans}?");

            if (confirm)
            {
                await _client.DeleteAsync($"api/mealplans/{mealplansId}");
                await OnInitializedAsync();
            }

        }
        
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }

    int GetMealPlanCount()
    {
        return MealPlan?.Count ?? 0;
    }

}

<p>Total MealPlan: @GetMealPlanCount()</p>


