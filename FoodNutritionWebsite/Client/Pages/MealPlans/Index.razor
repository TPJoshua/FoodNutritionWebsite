@page "/MealPlans"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize(Roles)]

<h3>MealPlan Index</h3>

<a href="/MealPlans/create" class="btn btn-primary my-2">
    <span class="oi oi-plus"></span> Create New MealPlan
</a>
<br />
<br />

<div class="container-fluid">
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
        @if (MealPlan == null)
        {
            <div class="alert alert-info">Loading Meal Plans...</div>
        }
        else
        {
            @foreach (var mealplan in MealPlan)
            {
                <div class="col afood">
                    <div class="card h-100 foodcard" style="text-decoration: none;">
                        <img src="@mealplan.Image" class="catfoodimage img-fluid" style="max-width: 100%; max-height: 100%">

                        <div class="card-body foodcardbody">
                            <h3 class="foodname">@mealplan.MealPlanName</h3>
                            <h5 class="foodprice">@mealplan.MealPlanCategory</h5>
                            <div class="d-flex justify-content-center">
                                <a href="/MealPlans/view/@mealplan.Id" class="btn btn-primary actionbutton">
                                    <i class="oi oi-eye"></i> View
                                </a>
                                <a href="/MealPlans/edit/@mealplan.Id" class="btn btn-warning actionbutton">
                                    <i class="oi oi-pencil"></i> Edit
                                </a>
                                <button class="btn btn-danger actionbutton" @onclick="@(()=>Delete(mealplan.Id))">
                                    <i class="oi oi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    public List<MealPlan>? MealPlan;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        MealPlan = await _client.GetFromJsonAsync<List<MealPlan>>($"api/mealplans");
    }

    async Task Delete(int mealplansId)
    {
        if (MealPlan != null)
        {
            var mealplans = MealPlan.First(q => q.Id == mealplansId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {mealplans}?");

            if (confirm)
            {
                await _client.DeleteAsync($"api/mealplans/{mealplansId}");
                await OnInitializedAsync();
            }

        }

    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }


}



